#include <Arduino.h>

#include "display.hpp"
#include "controls.hpp"
#include "dino.hpp"

// Размеры всех спрайтов
#define DINO_SIZE_X       24
#define DINO_SIZE_Y       24

#define DINO_DUCK_SIZE_X  32
#define DINO_DUCK_SIZE_Y  16

#define DINO_DEAD_SIZE_X  24
#define DINO_DEAD_SIZE_Y  24

#define CACTUS_0_SIZE_X   11
#define CACTUS_0_SIZE_Y   24
#define CACTUS_0_REAL_Y   20

#define CACTUS_1_SIZE_X   17
#define CACTUS_1_SIZE_Y   32
#define CACTUS_1_REAL_Y   25

#define BIRD_SIZE_X       23
#define BIRD_SIZE_Y       24
#define BIRD_REAL_Y       18

#define DINO_GROUND_Y     (DISPLAY_HEIGHT - DINO_GROUND_HEIGHT - 1)

// Спрайты динозаврика
const uint8_t DINO_0[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFE, 0xF6, 0xFE, 0xFE, 0xFE, 0x7E, 0x7E, 0x7E, 0x7E, 0x7C, 0x00, 0x00, 
	0x00, 0x00, 0xFE, 0xF8, 0xF0, 0xE0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x19, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0xFF, 0xBF, 0x1F, 0x0F, 0x0F, 0x1F, 0x17, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t DINO_1[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFE, 0xF6, 0xFE, 0xFE, 0xFE, 0x7E, 0x7E, 0x7E, 0x7E, 0x7C, 0x00, 0x00, 
	0x00, 0x00, 0xFE, 0xF8, 0xF0, 0xE0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x19, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x2F, 0x0F, 0x1F, 0xFF, 0x87, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};
const uint8_t DINO_DUCK_0[] PROGMEM = {
	0x00, 0x38, 0x70, 0xF0, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xF0, 0xF8, 0xD8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x37, 0x2F, 0x0F, 0x0F, 0x0F, 0xFF, 0xBF, 0x1F, 0x0F, 0x0F, 0x3F, 0x2F, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x05, 0x05, 0x05, 0x01, 0x01, 0x00, 
};
const uint8_t DINO_DUCK_1[] PROGMEM = {
	0x00, 0x38, 0x70, 0xF0, 0xF0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xF0, 0xF8, 0xD8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0xF7, 0xBF, 0x1F, 0x0F, 0x0F, 0x3F, 0x2F, 0x2F, 0x0F, 0x0F, 0x3F, 0x2F, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x05, 0x05, 0x05, 0x01, 0x01, 0x00, 
};
const uint8_t DINO_DEAD[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xE2, 0xEA, 0xE2, 0xFE, 0xFE, 0x7E, 0x7E, 0x7E, 0x7E, 0x7C, 0x00, 0x00, 
	0x00, 0x00, 0xFE, 0xF8, 0xF0, 0xE0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x09, 0x19, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0xFF, 0xBF, 0x1F, 0x0F, 0xFF, 0x87, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

// Спрайты двух видов кактусов
const uint8_t CACTUS_0[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0xE0, 0x00, 0x80, 0xC0, 0x80, 
	0xFE, 0xFF, 0xFE, 0x00, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0x7F, 
	0x03, 0x07, 0x0F, 0x0E, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0x00, 
};
const uint8_t CACTUS_1[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xF0, 0xF8, 0xF8, 0xF0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0x80, 
	0x07, 0x0F, 0x1F, 0x3F, 0x3C, 0x3C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0, 0xFF, 0x7F, 0x3F, 0x1F, 
	0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

// Спрайты птеродактеля
const uint8_t BIRD_0[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x60, 0x70, 0x78, 0x7C, 0x7E, 0x7E, 0x78, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x7F, 0x1F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x02, 0x02, 0x00, 
};
const uint8_t BIRD_1[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0x60, 0x70, 0x78, 0x7C, 0x7E, 0x7E, 0x78, 0xE1, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x02, 0x02, 0x00, 
};

Dino::Dino() {
  // При запуске игры очищаем экран
  display::oled.clear();

  // Рисуем землю и выводим её на экран
  display::oled.fastLineH(DINO_GROUND_Y + 1, 0, DISPLAY_WIDTH - 1);
  display::oled.update();

  // Устанавливаем некоторые параметры в стандартное значение
  _score = 0;
  _dino_y = DINO_GROUND_Y;

  // Сбрасываем состояния кнопок
  // controls::resetStates();
}

bool Dino::update() {
  // Ждем пока не наступит время обновления игры
  if (millis() - _last_time <= DINO_UPDATE_STEP) {
    return true;
  }
  _last_time = millis();

  int8_t old_dino_y = _dino_y;

  // Обновляем гравитацию
  _dino_vel += DINO_GRAVITY * DINO_UPDATE_STEP / 1000;

  // Если динозаврик на земле
  if (_dino_y >= DINO_GROUND_Y) {
    // Обрабатываем высокий прыжок
    if (controls::up_button.hold() || controls::button_a.hold()) {
      _dino_vel = -DINO_HIGH_JUMP_SPEED;
    }
    // Обрабатываем обычный прыжок
    else if (controls::up_button.release() || controls::button_a.release()) {
      _dino_vel = -DINO_JUMP_SPEED;
    }
  }

  // Перемещаяем в соответствии со скоростью
  _dino_y += _dino_vel * DINO_UPDATE_STEP / 1000;

  // Обрабатываем столкновение с землей
  if (_dino_y > DINO_GROUND_Y) {
    _dino_y = DINO_GROUND_Y;
    _dino_vel = 0;
  }

  // Увеличиваем счетчик кадров
  ++_frame_count;

  if (_frame_count % DINO_BASE_SCORE_RATE == 0) {
    // Увеличиваем счет игры в соотвествии со скоростью
    ++_score;
  }

  // Рисуем динозаврика и выводим его на экран
  display::oled.clear(
    DINO_POS_X,
    old_dino_y - DINO_SIZE_Y + 1,
    DINO_POS_X + DINO_SIZE_X - 1,
    old_dino_y
  );
  display::oled.drawBitmap(
    DINO_POS_X,
    _dino_y - DINO_SIZE_Y + 1,
    (_frame_count % (DINO_ANIM_STEP * 2) < DINO_ANIM_STEP) ? DINO_0 : DINO_1,
    DINO_SIZE_X, DINO_SIZE_Y,
    0, BUF_REPLACE
  );
  display::oled.update(
    DINO_POS_X,
    min(old_dino_y, _dino_y) - DINO_SIZE_Y + 2,
    DINO_POS_X + DINO_SIZE_X,
    max(old_dino_y, _dino_y) + 1
  );

  // Выводим счет на экран
  display::oled.textMode(BUF_REPLACE);
  display::oled.setScale(1);
  display::oled.setCursorXY(DINO_SCORE_PADDING, 0);
  uint8_t score_length = (uint8_t)display::oled.print(_score);
  display::oled.update(
    DINO_SCORE_PADDING,
    0,
    DINO_SCORE_PADDING + score_length * DISPLAY_FONT_WIDTH,
    DISPLAY_FONT_HEIGHT
  );

  return true;
}
